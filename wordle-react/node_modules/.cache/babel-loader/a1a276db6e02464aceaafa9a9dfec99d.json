{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useWordle = solution => {\n  _s();\n\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [guesses, setGuesses] = useState([...Array(6)]); // each guess is an array\n\n  const [history, setHistory] = useState([]); // each guess is a string\n\n  const [isCorrect, setIsCorrect] = useState(false);\n\n  const formatGuess = () => {\n    let solutionArray = [...solution];\n    let formattedGuess = [...currentGuess].map(l => {\n      return {\n        key: l,\n        color: \"grey\"\n      };\n    }); // find any green letters\n\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray[i] === l.key) {\n        formattedGuess[i].color = \"green\";\n        solutionArray[i] = null;\n      }\n    }); // find any yellow colors\n\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== \"green\") {\n        formattedGuess[i].color = \"yellow\";\n        solutionArray[solutionArray.indexOf(l.key)] = null;\n      }\n    });\n    return formattedGuess;\n  };\n\n  const addNewGuess = formattedGuess => {\n    if (currentGuess === solution) {\n      setIsCorrect(true);\n    }\n  };\n\n  const handleKeyup = _ref => {\n    let {\n      key\n    } = _ref;\n\n    if (key === \"Enter\") {\n      // only add guess if turn is less than 5\n      if (turn > 5) {\n        console.log(\"You used all your guesses\");\n        return;\n      } // do not allow duplicate words\n\n\n      if (history.includes(currentGuess)) {\n        console.log(\"You already tried that word\");\n        return;\n      } // check word is 5 char long\n\n\n      if (currentGuess.length !== 5) {\n        console.log(\"Word must be 5 chars long\");\n        return;\n      }\n\n      const formatted = formatGuess();\n      addNewGuess(formatted);\n    }\n\n    if (key === \"Backspace\") {\n      setCurrentGuess(prev => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n\n    if (/^[A-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(prev => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyup\n  };\n};\n\n_s(useWordle, \"dCcTfI6cWxblKRWl+nFnNGvNbio=\");\n\nexport default useWordle;","map":{"version":3,"sources":["/home/zeldah/git/tutorials/wordle-react/src/hooks/useWordle.js"],"names":["useState","useWordle","solution","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","Array","history","setHistory","isCorrect","setIsCorrect","formatGuess","solutionArray","formattedGuess","map","l","key","color","forEach","i","includes","indexOf","addNewGuess","handleKeyup","console","log","length","formatted","prev","slice","test"],"mappings":"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","sourcesContent":["import { useState } from \"react\"\n\nconst useWordle = (solution) => {\n    const [turn, setTurn] = useState(0)\n    const [currentGuess, setCurrentGuess] = useState('')\n    const [guesses, setGuesses] = useState([...Array(6)]) // each guess is an array\n    const [history, setHistory] = useState([]) // each guess is a string\n    const [isCorrect, setIsCorrect] = useState(false)\n\n    const formatGuess = () => {\n        let solutionArray = [...solution]\n        let formattedGuess = [...currentGuess].map((l) => {\n            return {key: l, color: \"grey\"}\n        })\n\n        // find any green letters\n        formattedGuess.forEach((l, i) => {\n            if (solutionArray[i] === l.key) {\n                formattedGuess[i].color = \"green\"\n                solutionArray[i] = null\n            }\n        })\n\n        // find any yellow colors\n        formattedGuess.forEach((l, i) => {\n            if (solutionArray.includes(l.key) && l.color !== \"green\") {\n                formattedGuess[i].color = \"yellow\"\n                solutionArray[solutionArray.indexOf(l.key)] = null\n            }\n        })\n        return formattedGuess\n    }\n\n\n    const addNewGuess = (formattedGuess) => {\n        if (currentGuess === solution) {\n            setIsCorrect(true)\n\n        }\n    }\n\n    const handleKeyup = ({ key }) => {\n        if (key === \"Enter\") {\n            // only add guess if turn is less than 5\n            if (turn > 5) {\n                console.log(\"You used all your guesses\");\n                return\n            }\n            // do not allow duplicate words\n            if (history.includes(currentGuess)) {\n                console.log(\"You already tried that word\");\n                return\n            }\n            // check word is 5 char long\n            if (currentGuess.length !== 5) {\n                console.log(\"Word must be 5 chars long\");\n                return\n            }\n            const formatted = formatGuess()\n            addNewGuess(formatted)\n        }\n        if (key === \"Backspace\") {\n            setCurrentGuess((prev) => {\n                return prev.slice(0, -1)\n            })\n            return\n        }\n        if (/^[A-z]$/.test(key)) {\n            if (currentGuess.length < 5) {\n                setCurrentGuess((prev) => {\n                    return prev + key\n                })\n            }\n        }\n    }\n\n    return {turn, currentGuess, guesses, isCorrect, handleKeyup}\n}\n\nexport default useWordle"]},"metadata":{},"sourceType":"module"}