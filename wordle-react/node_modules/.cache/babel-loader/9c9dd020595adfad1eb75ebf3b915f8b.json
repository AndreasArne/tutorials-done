{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useWordle = solution => {\n  _s();\n\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [guesses, setGuesses] = useState([]); // each guess is an array\n\n  const [history, setHistory] = useState([]); // each guess is a string\n\n  const [isCorrect, setIsCorrect] = useState(false);\n\n  const formatGuess = () => {\n    let solutionArray = [...solution];\n  };\n\n  const addNewGuess = () => {};\n\n  const handleKeyup = _ref => {\n    let {\n      key\n    } = _ref;\n\n    if (key === \"Enter\") {\n      // only add guess if turn is less than 5\n      if (turn > 5) {\n        console.log(\"You used all your guesses\");\n        return;\n      } // do not allow duplicate words\n\n\n      if (history.includes(currentGuess)) {\n        console.log(\"You already tried that word\");\n        return;\n      } // check word is 5 char long\n\n\n      if (currentGuess.length !== 5) {\n        console.log(\"Word must be 5 chars long\");\n        return;\n      }\n\n      formatGuess();\n    }\n\n    if (key === \"Backspace\") {\n      setCurrentGuess(prev => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n\n    if (/^[A-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(prev => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyup\n  };\n};\n\n_s(useWordle, \"IVXWGlg92Q9wlAIzJ5cBAfAX2uI=\");\n\nexport default useWordle;","map":{"version":3,"sources":["/home/zeldah/git/tutorials/wordle-react/src/hooks/useWordle.js"],"names":["useState","useWordle","solution","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","history","setHistory","isCorrect","setIsCorrect","formatGuess","solutionArray","addNewGuess","handleKeyup","key","console","log","includes","length","prev","slice","test"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,SAAS,GAAIC,QAAD,IAAc;AAAA;;AAC5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC,CAH4B,CAGe;;AAC3C,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC,CAJ4B,CAIe;;AAC3C,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMa,WAAW,GAAG,MAAM;AACtB,QAAIC,aAAa,GAAG,CAAC,GAAGZ,QAAJ,CAApB;AACH,GAFD;;AAKA,QAAMa,WAAW,GAAG,MAAM,CAEzB,CAFD;;AAIA,QAAMC,WAAW,GAAG,QAAa;AAAA,QAAZ;AAAEC,MAAAA;AAAF,KAAY;;AAC7B,QAAIA,GAAG,KAAK,OAAZ,EAAqB;AACjB;AACA,UAAId,IAAI,GAAG,CAAX,EAAc;AACVe,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA;AACH,OALgB,CAMjB;;;AACA,UAAIV,OAAO,CAACW,QAAR,CAAiBf,YAAjB,CAAJ,EAAoC;AAChCa,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA;AACH,OAVgB,CAWjB;;;AACA,UAAId,YAAY,CAACgB,MAAb,KAAwB,CAA5B,EAA+B;AAC3BH,QAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA;AACH;;AACDN,MAAAA,WAAW;AACd;;AACD,QAAII,GAAG,KAAK,WAAZ,EAAyB;AACrBX,MAAAA,eAAe,CAAEgB,IAAD,IAAU;AACtB,eAAOA,IAAI,CAACC,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACH,OAFc,CAAf;AAGA;AACH;;AACD,QAAI,UAAUC,IAAV,CAAeP,GAAf,CAAJ,EAAyB;AACrB,UAAIZ,YAAY,CAACgB,MAAb,GAAsB,CAA1B,EAA6B;AACzBf,QAAAA,eAAe,CAAEgB,IAAD,IAAU;AACtB,iBAAOA,IAAI,GAAGL,GAAd;AACH,SAFc,CAAf;AAGH;AACJ;AACJ,GAhCD;;AAkCA,SAAO;AAACd,IAAAA,IAAD;AAAOE,IAAAA,YAAP;AAAqBE,IAAAA,OAArB;AAA8BI,IAAAA,SAA9B;AAAyCK,IAAAA;AAAzC,GAAP;AACH,CAnDD;;GAAMf,S;;AAqDN,eAAeA,SAAf","sourcesContent":["import { useState } from \"react\"\n\nconst useWordle = (solution) => {\n    const [turn, setTurn] = useState(0)\n    const [currentGuess, setCurrentGuess] = useState('')\n    const [guesses, setGuesses] = useState([]) // each guess is an array\n    const [history, setHistory] = useState([]) // each guess is a string\n    const [isCorrect, setIsCorrect] = useState(false)\n\n    const formatGuess = () => {\n        let solutionArray = [...solution]\n    }\n\n\n    const addNewGuess = () => {\n\n    }\n\n    const handleKeyup = ({ key }) => {\n        if (key === \"Enter\") {\n            // only add guess if turn is less than 5\n            if (turn > 5) {\n                console.log(\"You used all your guesses\");\n                return\n            }\n            // do not allow duplicate words\n            if (history.includes(currentGuess)) {\n                console.log(\"You already tried that word\");\n                return\n            }\n            // check word is 5 char long\n            if (currentGuess.length !== 5) {\n                console.log(\"Word must be 5 chars long\");\n                return\n            }\n            formatGuess()\n        }\n        if (key === \"Backspace\") {\n            setCurrentGuess((prev) => {\n                return prev.slice(0, -1)\n            })\n            return\n        }\n        if (/^[A-z]$/.test(key)) {\n            if (currentGuess.length < 5) {\n                setCurrentGuess((prev) => {\n                    return prev + key\n                })\n            }\n        }\n    }\n\n    return {turn, currentGuess, guesses, isCorrect, handleKeyup}\n}\n\nexport default useWordle"]},"metadata":{},"sourceType":"module"}