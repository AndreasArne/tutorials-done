{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useWordle = solution => {\n  _s();\n\n  const [turn, setTurn] = useState(0);\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [guesses, setGuesses] = useState([...Array(6)]); // each guess is an array\n\n  const [history, setHistory] = useState([]); // each guess is a string\n\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [usedKeys, setUsedKeys] = useState({});\n\n  const formatGuess = () => {\n    let solutionArray = [...solution];\n    let formattedGuess = [...currentGuess].map(l => {\n      return {\n        key: l,\n        color: \"grey\"\n      };\n    }); // find any green letters\n\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray[i] === l.key) {\n        formattedGuess[i].color = \"green\";\n        solutionArray[i] = null;\n      }\n    }); // find any yellow colors\n\n    formattedGuess.forEach((l, i) => {\n      if (solutionArray.includes(l.key) && l.color !== \"green\") {\n        formattedGuess[i].color = \"yellow\";\n        solutionArray[solutionArray.indexOf(l.key)] = null;\n      }\n    });\n    return formattedGuess;\n  };\n\n  const addNewGuess = formattedGuess => {\n    if (currentGuess === solution) {\n      setIsCorrect(true);\n    }\n\n    setGuesses(prevGuesses => {\n      let newGuesses = [...prevGuesses];\n      newGuesses[turn] = formattedGuess;\n      return newGuesses;\n    });\n    setHistory(prevHistory => {\n      return [...prevHistory, currentGuess];\n    });\n    setTurn(prevTurn => {\n      return prevTurn + 1;\n    });\n    setUsedKeys(prevUsedKeys => {\n      let newKeys = { ...prevUsedKeys\n      };\n      formattedGuess.forEach(l => {\n        const currentColor = newKeys[l.key];\n      });\n      return newKeys;\n    });\n    setCurrentGuess(\"\");\n  };\n\n  const handleKeyup = _ref => {\n    let {\n      key\n    } = _ref;\n\n    if (key === \"Enter\") {\n      // only add guess if turn is less than 5\n      if (turn > 5) {\n        console.log(\"You used all your guesses\");\n        return;\n      } // do not allow duplicate words\n\n\n      if (history.includes(currentGuess)) {\n        console.log(\"You already tried that word\");\n        return;\n      } // check word is 5 char long\n\n\n      if (currentGuess.length !== 5) {\n        console.log(\"Word must be 5 chars long\");\n        return;\n      }\n\n      const formatted = formatGuess();\n      addNewGuess(formatted);\n    }\n\n    if (key === \"Backspace\") {\n      setCurrentGuess(prev => {\n        return prev.slice(0, -1);\n      });\n      return;\n    }\n\n    if (/^[A-z]$/.test(key)) {\n      if (currentGuess.length < 5) {\n        setCurrentGuess(prev => {\n          return prev + key;\n        });\n      }\n    }\n  };\n\n  return {\n    turn,\n    currentGuess,\n    guesses,\n    isCorrect,\n    handleKeyup\n  };\n};\n\n_s(useWordle, \"pbfF6lXJkK2HExjvqYaC4MQFrL4=\");\n\nexport default useWordle;","map":{"version":3,"sources":["/home/zeldah/git/tutorials/wordle-react/src/hooks/useWordle.js"],"names":["useState","useWordle","solution","turn","setTurn","currentGuess","setCurrentGuess","guesses","setGuesses","Array","history","setHistory","isCorrect","setIsCorrect","usedKeys","setUsedKeys","formatGuess","solutionArray","formattedGuess","map","l","key","color","forEach","i","includes","indexOf","addNewGuess","prevGuesses","newGuesses","prevHistory","prevTurn","prevUsedKeys","newKeys","currentColor","handleKeyup","console","log","length","formatted","prev","slice","test"],"mappings":"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","sourcesContent":["import { useState } from \"react\"\n\nconst useWordle = (solution) => {\n    const [turn, setTurn] = useState(0)\n    const [currentGuess, setCurrentGuess] = useState('')\n    const [guesses, setGuesses] = useState([...Array(6)]) // each guess is an array\n    const [history, setHistory] = useState([]) // each guess is a string\n    const [isCorrect, setIsCorrect] = useState(false)\n    const [usedKeys, setUsedKeys] = useState({})\n\n    const formatGuess = () => {\n        let solutionArray = [...solution]\n        let formattedGuess = [...currentGuess].map((l) => {\n            return {key: l, color: \"grey\"}\n        })\n\n        // find any green letters\n        formattedGuess.forEach((l, i) => {\n            if (solutionArray[i] === l.key) {\n                formattedGuess[i].color = \"green\"\n                solutionArray[i] = null\n            }\n        })\n\n        // find any yellow colors\n        formattedGuess.forEach((l, i) => {\n            if (solutionArray.includes(l.key) && l.color !== \"green\") {\n                formattedGuess[i].color = \"yellow\"\n                solutionArray[solutionArray.indexOf(l.key)] = null\n            }\n        })\n        return formattedGuess\n    }\n\n\n    const addNewGuess = (formattedGuess) => {\n        if (currentGuess === solution) {\n            setIsCorrect(true)\n        }\n        setGuesses((prevGuesses) => {\n            let newGuesses = [...prevGuesses]\n            newGuesses[turn] = formattedGuess\n            return newGuesses\n        })\n        setHistory((prevHistory) => {\n            return [...prevHistory, currentGuess]\n        })\n        setTurn((prevTurn) => {\n            return prevTurn + 1\n        })\n        setUsedKeys((prevUsedKeys) => {\n            let newKeys = {...prevUsedKeys}\n            formattedGuess.forEach((l) => {\n                const currentColor = newKeys[l.key]\n            })\n            return newKeys\n        })\n        setCurrentGuess(\"\")\n    }\n\n    const handleKeyup = ({ key }) => {\n        if (key === \"Enter\") {\n            // only add guess if turn is less than 5\n            if (turn > 5) {\n                console.log(\"You used all your guesses\");\n                return\n            }\n            // do not allow duplicate words\n            if (history.includes(currentGuess)) {\n                console.log(\"You already tried that word\");\n                return\n            }\n            // check word is 5 char long\n            if (currentGuess.length !== 5) {\n                console.log(\"Word must be 5 chars long\");\n                return\n            }\n            const formatted = formatGuess()\n            addNewGuess(formatted)\n        }\n        if (key === \"Backspace\") {\n            setCurrentGuess((prev) => {\n                return prev.slice(0, -1)\n            })\n            return\n        }\n        if (/^[A-z]$/.test(key)) {\n            if (currentGuess.length < 5) {\n                setCurrentGuess((prev) => {\n                    return prev + key\n                })\n            }\n        }\n    }\n\n    return {turn, currentGuess, guesses, isCorrect, handleKeyup}\n}\n\nexport default useWordle"]},"metadata":{},"sourceType":"module"}